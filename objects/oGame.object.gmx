<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

mapSX = 10;
mapSY = 5;

map = ds_grid_create(mapSX, mapSY*3);

tileSize = 16;

mapX = (room_width/2) - ((mapSX*tileSize)/2);
mapY = (room_height/2) - ((mapSY*tileSize)/2);

level = 0;
yy = mapSY+3;
xx = floor(mapSX/2);



frame = 0;

air = 50;
airLimit = 25;
airTank = 0;

hp = 5;

floating = 1;

//Default the map
map_default();

map_set( xx, yy+1, 1 );

pX = 0;
pY = 0;

//Items
itemSize = 4;
itemGoggles = false;
itemDrill = false;
itemSuit = false;
itemJet = false;
jetOn = false;
jetFill = 0;

itemFlowers = false;

//Music
musicIntro = audio_play_sound(musIntro, 1, 0);

musicGameOver = 0;

//Start / End
fadeMode = 0;
fadeSize = 1.;

iceLevel = 0.5;

shopOpen = false;
shopList[ itemSize-1] = 0;
shopSelect = -1;

quit = 0;

deathCause = "UNKNOWN CAUSE";

money = 0;
gfxHurt = 0;

pressure = 1;

finish = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>quit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Shop
if (   map_get( clamp(xx-1,0,mapSX-1), yy ) == 10
    || map_get( clamp(xx+1,0,mapSX-1), yy ) == 10
    || map_get( xx, yy-1 ) == 10
    || map_get( xx, yy+1 ) == 10 ) {
        
        shopOpen = true;
        
        } else {
        
        shopOpen = false;
        
        }
        
if ( shopOpen ) &amp;&amp; (hp &gt; 0) {
    shopSelect = -1;
    var _size = 18;
    var _itemX = mapX + 10; //(room_width/2) - (( (itemSize-1)*_size)/2);
    for (var _i = 0; _i &lt; itemSize; _i++) {
        var _lx = -12 + _itemX + _i*_size;
        var _ly = -12 + 24 - 6*itemGoggles;
        var _hx = 12 + _itemX + _i*_size;
        var _hy = 12 + 24 - 6*itemGoggles;
        
        if (mouse_x &gt; _lx &amp;&amp; mouse_x &lt; _hx &amp;&amp; mouse_y &gt; _ly &amp;&amp; mouse_y &lt; _hy) {
            shopSelect = _i;
            }
        }
        
    if (mouse_check_button_pressed(mb_left) &amp;&amp; shopSelect!=-1) {
        
        var _price = shop_get_price( shopList[@ shopSelect] );
        if (money &gt;= _price) {
            money-=_price;
            item_get( shopList[@ shopSelect] );
            shopList[@ shopSelect] = -1;
            audio_play_sound( sfxPurchase, 2, 0 );
            } else {
            if (audio_is_playing( sfxWrong ) ) {
                audio_stop_sound( sfxWrong );
                }
            audio_play_sound( sfxWrong, 2, 0 );
            }
        
        }
        
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Music

if (!audio_is_playing( musicIntro ) &amp;&amp; !audio_is_playing( musLoop) &amp;&amp; hp &gt; 0 ) {
    audio_play_sound( musLoop, 1, 1);
    }
    
if ( hp == 0 &amp;&amp; musicGameOver == 0 ) {
    audio_stop_sound( musLoop );
    audio_stop_sound( musIntro );
    audio_play_sound( musGOIntro, 1, 0 );
    musicGameOver = 1;
    }
    
if ( hp == 0 &amp;&amp; !(audio_is_playing( musGOIntro ) || audio_is_playing( musGOLoop ) ) ) {
    audio_play_sound( musGOLoop, 1, 1 );
    }
    
//Fade
if (fadeMode = 0) {
    fadeSize -= 0.01; //lerp(fadeSize, 0.0, 0.05);
    if ((fadeSize - 0.005) &lt;= 0 ){
        fadeMode = 1;
        }
    }
    
//if (fadeMode = 2) {
///    fadeSize = lerp(fadeSize, 1.0, 0.05);
//    if ((fadeSize + 0.005) &gt;= 1. ){
//        fadeMode = 1;
//        }
//    }
    
//Restart
if (hp == 0) &amp;&amp; (keyboard_check_pressed(ord('R'))) {
    ds_list_add( global.deathList, (level+2)*10 );
    ds_list_sort( global.deathList, true );
    draw_texture_flush();
    audio_stop_all();
    room_goto( rmGame );
    //game_restart();
    }
    
//Quit
if ( keyboard_check_pressed( vk_escape ) ) {
    quit++;
    alarm[0] = 120;
    }
    
if (quit &gt;= 2) {
    game_end();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DEBUG:
if (keyboard_check(vk_control) &amp;&amp; keyboard_check(ord('Q')) &amp;&amp; keyboard_check_pressed(ord('E'))) {
    hp = 5;
    air = 100;
    money = 100;
    airTank = 4;
    }
if (keyboard_check(vk_control) &amp;&amp; keyboard_check(ord('Q')) &amp;&amp; keyboard_check_pressed(ord('R'))) {
    level=975;
    itemSuit = true;
    itemJet = true;
    }

//Fullscreen
if ( keyboard_check( vk_control ) &amp;&amp; keyboard_check_pressed(ord('F'))) {
    window_set_fullscreen( !window_get_fullscreen() );
    }
var _lhp = hp;
// Movement  
if (hp &gt; 0) &amp;&amp; !(finish) { 

    if ( keyboard_check_pressed( vk_left ) || keyboard_check_pressed(ord('A')) ) {
        map_move_check( -1 );
        } else 
    if ( keyboard_check_pressed( vk_right ) || keyboard_check_pressed(ord('D')) ) {
        map_move_check(  1 );
        } else 
    if ( keyboard_check_pressed( vk_down ) || keyboard_check_pressed(ord('S')) ) {
        map_move_check(  2 );
        }
    if ( keyboard_check_pressed( vk_up ) || keyboard_check_pressed(ord('W')) ) {
        map_move_check(  3 );
        }
        
    }
  
//Jet Values  
jetFill = clamp(jetFill, 0, 5*itemJet);
if (jetFill == 5 ) {
    if ( keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_right) ) {
        jetOn = !jetOn;
        }
    } else {
    jetOn = false;
    }    

    
    
if (_lhp != hp) {
    gfxHurt = 30;
    }
gfxHurt--;
    
//xx += keyboard_check_pressed( vk_right ) - keyboard_check_pressed( vk_left );
xx = clamp( xx, 0, mapSX-1 );

pressure = 1 + floor( (level+2)/250 )*(!itemSuit);

//Visuals
frame+=(1./10.);
frame%=4.;

pX = sign(pX) * max( 0, abs(pX)-1 );
pY = sign(pY) * max( 0, abs(pY)-1 );

switch( airTank ) {

    case 0:
        airLimit = 25;
        break;
        
    case 1:
        airLimit = 35;
        break;
        
    case 2:
        airLimit = 45;
        break;
        
    case 3:
        airLimit = 55;
        break;
        
    case 4:
        airLimit = 70;
        break;
        
        }

air = clamp( air, 0, airLimit );
hp = clamp( hp, 0, 5 );

//
if ( map_get(xx,yy) == 99 ) {
    finish = true;
    }

if (finish) {
    fadeMode = 2;
    fadeSize += 0.01;
    audio_sound_gain( musIntro, 1.0 - fadeSize, 0. );
    audio_sound_gain( musLoop, 1.0 - fadeSize, 0. );
    
    if (fadeSize&gt;=1.){
        audio_stop_all();
        audio_sound_gain( musIntro, 1.0, 0. );
        audio_sound_gain( musLoop, 1.0, 0. );
        room_goto( rmEnd );
        }
    }
    

//DEBUG
//itemGoggles = keyboard_check(vk_space);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_white);
d3d_set_projection_ortho( 0, 0, 320, 180, 0 );
//draw_set_font(fnGUI);
draw_set_halign( fa_left) ;
draw_text( 1, 1, string(fps_real) );
draw_text( 1, 16, string(fps) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_start();
d3d_set_projection_ortho( 0, 0, room_width, room_height, 0 );


draw_set_font( fnGame );

var _f = floor(frame);
var _SY = 5;

shader_set(shDamage);
shader_set_uniform_f( shader_get_uniform(shDamage, "u_HP"), hp );

//Draw The Map
for( var _i = 0; _i &lt; mapSX; _i++ ) {
    for( var _j = 0 - itemGoggles; _j &lt; (mapSY+itemGoggles); _j++ ) {
    
        //var _tile = sprTileBlank;
        var _d = (level + _j )*10;
        
        //Draw BG
        draw_sprite( tileBG, 0, mapX + _i*tileSize, mapY + _j*tileSize );
        
        //Draw Grid
        draw_sprite( sprTile, 1, mapX + _i*tileSize, mapY + _j*tileSize );
        
        //if (hp &gt; 0 ) {
        draw_map_tile( _i, _j+mapSY+1, mapX + _i*tileSize, mapY + _j*tileSize, _d, _f );
        //}
        

            
        //Draw Player
        if ( _i == xx  &amp;&amp; _j == 2 ) {
            if (hp &gt; 0) {
                if (air == 0 || gfxHurt) {
                    draw_sprite( sprPlayerHurt, _f, pX + mapX + _i*tileSize, pY + mapY + _j*tileSize );
                    } else {
                    draw_sprite( sprPlayer, _f, pX + mapX + _i*tileSize, pY + mapY + _j*tileSize );
                    }
                } else {
                draw_sprite( sprPlayerDead, _f, pX + mapX + _i*tileSize, pY + mapY + _j*tileSize );
                }
            }
        
        }
    }
    
shader_reset();
    
//Draw The Hearts
for( var _i = 0; _i &lt; 5; _i++ ) {
    var _offx = mapX+4; //(room_width/2) - (2*16);
    draw_sprite( sprHeart, ( _i &lt; hp ), _offx + _i*tileSize, mapY + 5.5*tileSize + tileSize*itemGoggles );
    if (hp == 1) {
        draw_sprite( sprHeart, ( _i &lt; hp )*2.*((_f%2)==0)*(hp == 1), _offx + _i*tileSize, mapY + 5.5*tileSize + tileSize*itemGoggles );
        }
    }
    
//Draw The Items
for( var _i = 0; _i &lt; 6; _i++ ) {
    var _offx = mapX+4; //(room_width/2) - (2*16);
    var _xx = _offx + _i*tileSize;
    var _yy = mapY + 6.5*tileSize + tileSize*itemGoggles;
    
    //Air Tank
    if (_i == 0 &amp;&amp; airTank) {
        draw_sprite( sprItem, 5+airTank, _xx, _yy );
        }
    
    //Goggles
    if (_i == 1 &amp;&amp; itemGoggles) {
        draw_sprite( sprItem, 2, _xx, _yy );
        }
        
    //Jet
    if (_i == 2 &amp;&amp; itemJet) {
        if (jetOn) {
            draw_sprite( sprJet, jetFill+1, _xx, _yy );
            } else {
            draw_sprite( sprJet, jetFill, _xx, _yy );
            }
        }
        
    //Drill
    if (_i == 3 &amp;&amp; itemDrill) {
        draw_sprite( sprItem, 3, _xx, _yy );
        }
        
    //Suit
    if (_i == 4 &amp;&amp; itemSuit) {
        draw_sprite( sprItem, 5, _xx, _yy );
        }
        
    //Flowers
    if (_i == 5 &amp;&amp; itemFlowers) {
        draw_sprite( sprItem, 10, _xx, _yy );
        }
        
    }

//game over
if (hp &lt;= 0) {
    draw_set_halign( fa_center );
    if (_f%2 == 0) {
        draw_set_color(c_red);
        }
    draw_text( room_width/2, 16 - tileSize*itemGoggles, "GAME OVER" );
    draw_set_color(c_yellow);
    draw_text( room_width/2, 25 - tileSize*itemGoggles, deathCause + " KILLED YOU AT " + string( 10*(level+2)) + " FT!" );
    draw_set_color(c_white);
    draw_text( room_width/2, 34 - tileSize*itemGoggles, "PRESS 'R' TO RESTART" );
    } 
    
//Shop
if (shopOpen) &amp;&amp; (hp &gt; 0) {
    
    draw_set_halign( fa_center );

    var _size = 18;
    //var _itemX = (room_width/2) - (( (itemSize-1)*_size)/2);
    var _itemX = mapX + 10;
    for (var _i = 0; _i &lt; itemSize; _i++) {
        draw_sprite( sprItemBox, 0 + (shopSelect == _i), _itemX + _i*_size, 24 - 6*itemGoggles );
        draw_sprite( sprItem, shopList[@ _i]+1, _itemX + _i*_size, -4 + 24 - 6*itemGoggles );
        if (shopList[@ _i] != -1) {
            draw_text( _itemX + _i*_size, 26 - 6*itemGoggles, string( shop_get_price( shopList[@ _i] ) ) );
            }
        }
        
    draw_set_halign( fa_left );
        
    var _str = "N/A";
    
    if (shopSelect == -1) {
    
        _str = "YOU #BUYIN'?";
        
        } else {
    
        switch( shopList[@ shopSelect] ) {
            case -1:
                _str = "SOLD OUT!";
                break;
        
            case 0:
                _str = "RECOVER #ALL HP";
                break;
        
            case 1:
                _str = "EXTEND #VISION";
                break;
                
            case 2:
                _str = "BLOCK #BREAKER"
                break;
                
            case 3:
                _str = "MOVE #UPWARDS"
                break;
                
            case 4:
                _str = "WITHSTAND #PRESSURE"
                break;
                
            case 5:
                _str = "+10 AIR #CAPACITY"
                break;
                
            case 6:
                _str = "+10 AIR #CAPACITY"
                break;
                
            case 7:
                _str = "+10 AIR #CAPACITY"
                break;
                
            case 8:
                _str = "+15 AIR #CAPACITY"
                break;
                
            case 9:
                _str = "SOME PLAIN #FLOWERS"
                break;
                
            }
            
        }
            
    draw_text( 2 + _itemX + _size*itemSize, 16 - 6*itemGoggles, _str );
        
    }
    
//Air
draw_set_halign( fa_right );
draw_text( mapX + (tileSize-3)*mapSX, 3 + mapY + 5*tileSize + tileSize*itemGoggles, "AIR" );

    draw_set_color(c_red);
    draw_rectangle( 2 + mapX + (tileSize-3)*mapSX, 4 + mapY + 5*tileSize + tileSize*itemGoggles,
        8 + 2 + mapX + (tileSize-3)*mapSX, 7 + 4 + mapY + 5*tileSize + tileSize*itemGoggles, 0);

    draw_set_color(c_black);
    draw_set_halign( fa_center );
    draw_text( mapX + 7 + (tileSize-3)*mapSX, 3 + mapY + 5*tileSize + tileSize*itemGoggles, string(pressure) );
    draw_set_color(c_white);
    draw_text( mapX + 6 + (tileSize-3)*mapSX, 3 + mapY + 5*tileSize + tileSize*itemGoggles, string(pressure) );

//Pressure Info
/*
if (air &lt; 100) {
    draw_set_color(c_gray);
    draw_set_halign( fa_right );
    draw_text( mapX + 2 + (tileSize)*mapSX, 3 + mapY + 5*tileSize + tileSize*itemGoggles, "0  " );
    }
    */
//Air
if (air &lt; 10) {
    draw_set_color(c_gray);
    draw_set_halign( fa_right );
    draw_text( mapX + 2 + (tileSize)*mapSX, 3 + mapY + 5*tileSize + tileSize*itemGoggles, " 0 " );
    }
draw_set_halign( fa_right );
draw_set_color(c_white);
if (air &lt;= 10 &amp;&amp; (_f%2.)==0) {
    draw_set_color(c_red);
    }
if (air == airLimit) {
    draw_set_color(c_lime);
    }
draw_text( mapX + 2 + (tileSize)*mapSX, 3 + mapY + 5*tileSize + tileSize*itemGoggles, string(air) );

draw_set_color(c_white);

//Money
draw_set_halign( fa_right );
draw_text( mapX + (tileSize-3)*mapSX, 12 + mapY + 5*tileSize + tileSize*itemGoggles, "$$$" );
if (money &lt; 10) {
    draw_set_color(c_gray);
    draw_set_halign( fa_right );
    draw_text( mapX + 2 + (tileSize)*mapSX, 12 + mapY + 5*tileSize + tileSize*itemGoggles, " 0 " );
    }
draw_set_halign( fa_right );
draw_set_color(c_white);
draw_text( mapX + 2 + (tileSize)*mapSX, 12 + mapY + 5*tileSize + tileSize*itemGoggles, string(money) );


draw_set_color(c_white);
draw_set_halign( fa_left );

//Fade
if (fadeMode != 1) {
    draw_set_color(c_black);
    draw_rectangle( 0, 0, room_width, 1 + (room_height/2)*fadeSize, 0 );
    draw_rectangle( 0, room_height, room_width, room_height - (1 + (room_height/2)*fadeSize), 0 );
    draw_set_color(c_white);
    }
    
//Quitting
if (quit) {
    draw_text( 2, 2, "PRESS 'ESC' #AGAIN TO #QUIT" );
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
